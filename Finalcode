# models.py

from sqlalchemy import Column, Integer, String, Float, Boolean, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pydantic import BaseModel, Field, validator

# manually made DB connection string for SQLite
DATABASE_URL = "sqlite:///./test.db"

# setting up engine and session
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)

Base = declarative_base()

# menu_items table model
class MenuItem(Base):
    __tablename__ = "menu_items"

    item_id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(String, nullable=True)
    price = Column(Float, nullable=False)
    category = Column(String, nullable=False)
    cuisine = Column(String, nullable=True)
    rating = Column(Float, nullable=True)  # new rating column added
    is_available = Column(Boolean, default=True)


# ===== Pydantic Schemas =====

class MenuItemBase(BaseModel):
    name: str
    description: str | None = None
    price: float
    category: str
    cuisine: str | None = None
    rating: float | None = None

    @validator("price")
    def check_price(cls, value):
        if value < 0:
            raise ValueError("Price can't be negative")
        return value

    @validator("rating")
    def check_rating(cls, value):
        if value is not None and (value < 0 or value > 5):
            raise ValueError("Rating must be between 0 and 5")
        return value

class MenuItemCreate(MenuItemBase):
    pass

# response model with ID and availability
class MenuItemResponse(MenuItemBase):
    item_id: int
    is_available: bool

    class Config:
        orm_mode = True



# main.py

from fastapi import FastAPI, HTTPException, Depends, Query
from sqlalchemy.orm import Session
from typing import List
from models import Base, engine, SessionLocal, MenuItem, MenuItemCreate, MenuItemResponse

Base.metadata.create_all(bind=engine)  # creates table if not exists

app = FastAPI()

# DB helper
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ===== API Endpoints =====

@app.post("/menu/", response_model=MenuItemResponse)
def create_item(item: MenuItemCreate, db: Session = Depends(get_db)):
    print(f"Creating new item: {item.name}")
    db_item = MenuItem(**item.dict())
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item

@app.get("/menu/", response_model=List[MenuItemResponse])
def list_items(db: Session = Depends(get_db)):
    print("Getting all items...")
    return db.query(MenuItem).all()

@app.get("/menu/{item_id}", response_model=MenuItemResponse)
def get_item(item_id: int, db: Session = Depends(get_db)):
    item = db.query(MenuItem).get(item_id)
    if not item:
        print(f"Item {item_id} not found")
        raise HTTPException(status_code=404, detail="Item not found")
    return item

@app.put("/menu/{item_id}", response_model=MenuItemResponse)
def update_item(item_id: int, item: MenuItemCreate, db: Session = Depends(get_db)):
    db_item = db.query(MenuItem).get(item_id)
    if not db_item:
        raise HTTPException(status_code=404, detail="Item not found")
    for key, value in item.dict().items():
        setattr(db_item, key, value)
    db.commit()
    db.refresh(db_item)
    print(f"Item {item_id} updated")
    return db_item

@app.patch("/menu/{item_id}/availability", response_model=MenuItemResponse)
def toggle_availability(item_id: int, available: bool, db: Session = Depends(get_db)):
    item = db.query(MenuItem).get(item_id)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    item.is_available = available
    db.commit()
    db.refresh(item)
    print(f"Item {item_id} availability set to {available}")
    return item

@app.get("/menu/category/", response_model=List[MenuItemResponse])
def filter_by_category(category: str = Query(...), db: Session = Depends(get_db)):
    items = db.query(MenuItem).filter(MenuItem.category == category).all()
    if not items:
        raise HTTPException(status_code=404, detail="No items in this category")
    return items

@app.delete("/menu/{item_id}")
def delete_item(item_id: int, db: Session = Depends(get_db)):
    item = db.query(MenuItem).get(item_id)
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    db.delete(item)
    db.commit()
    print(f"Deleted item {item_id}")
    return {"detail": f"Item {item_id} deleted"}


# client.py

import requests

BASE_URL = "http://127.0.0.1:8000"

def create_item():
    print("\n[CREATE ITEM]")
    payload = {
        "name": "Paneer Butter Masala",
        "description": "Creamy paneer gravy",
        "price": 200.0,
        "category": "main course",
        "cuisine": "Indian",
        "rating": 4.5  # new field
    }
    res = requests.post(f"{BASE_URL}/menu/", json=payload)
    print(res.json())

def list_items():
    print("\n[LIST ITEMS]")
    res = requests.get(f"{BASE_URL}/menu/")
    for item in res.json():
        print(item)

def get_item(item_id):
    print(f"\n[GET ITEM] {item_id}")
    res = requests.get(f"{BASE_URL}/menu/{item_id}")
    print(res.json())

def update_item(item_id):
    print(f"\n[UPDATE ITEM] {item_id}")
    payload = {
        "name": "Paneer Tikka",
        "description": "Grilled paneer with spices",
        "price": 220.0,
        "category": "starter",
        "cuisine": "Indian",
        "rating": 4.8
    }
    res = requests.put(f"{BASE_URL}/menu/{item_id}", json=payload)
    print(res.json())

def toggle_availability(item_id, available):
    print(f"\n[TOGGLE AVAILABILITY] {item_id} => {available}")
    res = requests.patch(f"{BASE_URL}/menu/{item_id}/availability", params={"available": available})
    print(res.json())

def filter_by_category(category):
    print(f"\n[FILTER CATEGORY] {category}")
    res = requests.get(f"{BASE_URL}/menu/category/", params={"category": category})
    for item in res.json():
        print(item)

def delete_item(item_id):
    print(f"\n[DELETE ITEM] {item_id}")
    res = requests.delete(f"{BASE_URL}/menu/{item_id}")
    print(res.json())

# Running everything once to test
if __name__ == "__main__":
    create_item()
    list_items()
    get_item(1)
    update_item(1)
    toggle_availability(1, False)
    filter_by_category("starter")
    delete_item(1)
    list_items()
